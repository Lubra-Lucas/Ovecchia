NOVA CONDIÇÃO DO SINAL :

from sklearn.ensemble import RandomForestClassifier


# --- Parâmetros ---
symbol = "GOLD-T"
sma_short, sma_long = 60, 70
lookahead = 3
threshold = 0.002

# =======================
# CÁLCULO DAS FEATURES
# =======================
# SMAs
df[f'SMA_{sma_short}'] = df['close'].rolling(window=sma_short).mean()
df[f'SMA_{sma_long}']  = df['close'].rolling(window=sma_long).mean()
df['SMA_20'] = df['close'].rolling(window=20).mean()

# RSI(14)
delta = df['close'].diff()
gain = np.where(delta > 0, delta, 0.0)
loss = np.where(delta < 0, -delta, 0.0)
avg_gain = pd.Series(gain).rolling(window=14, min_periods=14).mean()
avg_loss = pd.Series(loss).rolling(window=14, min_periods=14).mean()
rs = avg_gain / avg_loss.replace(0, np.nan)
df['RSI_14'] = 100 - (100 / (1 + rs))
df['RSI_14'] = df['RSI_14'].fillna(method='bfill')

# RSL(20)
df['RSL_20'] = df['close'] / df['SMA_20']

# ATR(14)
df['prior_close'] = df['close'].shift(1)
df['tr1'] = df['high'] - df['low']
df['tr2'] = (df['high'] - df['prior_close']).abs()
df['tr3'] = (df['low']  - df['prior_close']).abs()
df['TR'] = df[['tr1', 'tr2', 'tr3']].max(axis=1)
df['ATR'] = df['TR'].rolling(window=14).mean()

# Retorno, aceleração e volatilidade intrínseca
df['ret_1'] = df['close'].pct_change()
df['accel'] = df['ret_1'].diff()
df['decel'] = -df['accel']
df['atr_norm'] = df['ATR'] / df['close']

# =======================
# CRIAÇÃO DO TARGET Y
# =======================
df['future_ret'] = df['close'].shift(-lookahead) / df['close'] - 1
df['y'] = 0
df.loc[df['future_ret'] > threshold, 'y'] = 1
df.loc[df['future_ret'] < -threshold, 'y'] = -1

# =======================
# TREINAMENTO DO MODELO
# =======================
features = ['RSI_14','RSL_20','ATR','ret_1','accel','decel','atr_norm']
X = df[features].dropna()
y = df.loc[X.index, 'y']

model = RandomForestClassifier(n_estimators=200, random_state=42)
model.fit(X, y)

# =======================
# PREVISÕES
# =======================
df['Signal_model'] = np.nan
df.loc[X.index, 'Signal_model'] = model.predict(X)

# =======================
# FILTRO DE TENDÊNCIA
# =======================
df['Signal'] = 'Stay Out'
for i in range(1, len(df)):
    prev_estado = df['Signal'].iloc[i-1]

    # Sugestão de compra
    if df['Signal_model'].iloc[i] == 1:
        if df['close'].iloc[i] > df[f'SMA_{sma_short}'].iloc[i] and df['close'].iloc[i] > df[f'SMA_{sma_long}'].iloc[i]:
            df.loc[df.index[i], 'Signal'] = 'Buy'
        else:
            df.loc[df.index[i], 'Signal'] = prev_estado

    # Sugestão de venda
    elif df['Signal_model'].iloc[i] == -1:
        if df['close'].iloc[i] < df[f'SMA_{sma_short}'].iloc[i]:
            df.loc[df.index[i], 'Signal'] = 'Sell'
        else:
            df.loc[df.index[i], 'Signal'] = prev_estado
    else:
        df.loc[df.index[i], 'Signal'] = prev_estado